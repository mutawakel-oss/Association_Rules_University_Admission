MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 07, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:50:01" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 07, 2021
Time:                17:50:01
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2ILK3J4 "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2ILK3J4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 07, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:50:01" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                mutawakelm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70166022";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M5P091317";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.3";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 07, 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:50:01" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                mutawakelm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22329      proc freq data=EMWS1.FIMPORT_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.FIMPORT_VariableSet noprint;
22330      table ROLE*LEVEL/out=WORK.FIMPORTMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.FIMPORTMETA;
22331      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: The data set WORK.FIMPORTMETA has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      

22332      proc print data=WORK.FIMPORTMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.FIMPORTMETA label noobs;
22333      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22334      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
22335      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22336      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
22337      run;

NOTE: There were 2 observations read from the data set WORK.FIMPORTMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

22338      title10;
MPRINT(EM_DIAGRAM):   title10;
22339      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * FIMPORT: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Association Rules in SAS';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Association Rules for Applicants';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22657      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22658      * FIMPORT: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * FIMPORT: Generation of macros and macro variables;
22659      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
22660      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

22661      %let EMEXCEPTIONSTRING=;
22662      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22663      * TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   * TRAIN: FIMPORT;
22664      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22665      %let EM_ACTION = TRAIN;
22666      %let syscc = 0;
22667      /* Fimport.source */
22668      %macro main;
22669            %if %upcase(&EM_ACTION) = CREATE %then %do;
22670               filename temp catalog 'sashelp.emsamp.Fimport_create.source';
22671               %include temp;
22672               filename temp;
22673               %create;
22674            %end;
22675            %else
22676            %if %upcase(&EM_ACTION) = TRAIN %then %do;
22677               filename temp catalog 'sashelp.emsamp.Fimport_train.source';
22678               %include temp;
22679               filename temp;
22680               %train;
22681            %end;
22682            %else
22683            %if %upcase(&EM_ACTION) = UPDATE %then %do;
22684               filename temp catalog 'sashelp.emsamp.Fimport_update.source';
22685               %include temp;
22686               filename temp;
22687               %update;
22688            %end;
22689            %else
22690            %if %upcase(&EM_ACTION) = PROPERTY %then %do;
22691               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22692               %include temp;
22693               filename temp;
22694               %property;
22695            %end;
22696             %else
22697            %if %upcase(&EM_ACTION) = SCORE %then %do;
22698               filename temp catalog 'sashelp.emsamp.Fimport_score.source';
22699               %include temp;
22700               filename temp;
22701               %score;
22702            %end;
22703            %else
22704            %if %upcase(&EM_ACTION) = REPORT %then %do;
22705               filename temp catalog 'sashelp.emsamp.Fimport_report.source';
22706               %include temp;
22707               filename temp;
22708               %report;
22709            %end;
22710            %else
22711            %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
22712               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22713               %include temp;
22714               filename temp;
22715               %openvariableset;
22716            %end;
22717            %else
22718            %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
22719               filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
22720               %include temp;
22721               filename temp;
22722               %closevariableset;
22723            %end;
22724      %mend main;
22725      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emsamp.Fimport_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
22726     +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
MPRINT(MAIN):  ;
22727     +%macro appendExt;
22728     +   data _null_;
22729     +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
22730     +      rfile = reverse(tempuif);
22731     +      period = indexc(rfile,".");
22732     +      uif = substr(tempuif, 1, length(tempuif)- period+1);
22733     +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
22734     +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
22735     +   run;
22736     +%mend appendExt;
22738     +%macro getNobs(ds);
22739     + %global dset nobs;
22740     + %let dset=&ds;
22741     + %let dsid = %sysfunc(open(&dset));
22742     + %if &dsid %then %do;
22743     +      %let nobs =%sysfunc(attrn(&dsid,nobs));
22744     +      %let rc = %sysfunc(close(&dsid));
22745     +   %end;
22746     + %else %put open for data set &dset failed - %sysfunc(sysmsg());
22747     +%mend getNobs;
22748     +%macro keepordrop;
22749     +  proc contents data=work.importfile noprint
22750     +  out=work.importattrs;
22751     +  run;
22752     +  %getNobs(work.importattrs);
22753     +  data _null_;
22754     +    set  work.importattrs;
22755     +    call symput("varname"||left(_n_),name);
22756     +  run;
22758     +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
22759     +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
22760     +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
22761     +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
22762     +     %put diff=&diff;
22763     +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
22764     +         %let kORd = keep;
22765     +             %let start=1;
22766     +             %let end = &EM_PROPERTY_MAXCOLS;
22767     +       %end;
22768     +     %else %do;
22769     +         %let kORd = drop;
22770     +             %let start = &EM_PROPERTY_MAXCOLS + 1;
22771     +             %let end = &nobs;
22772     +       %end;
22773     +     data &em_user_data;
22774     +        set &em_user_data;
22775     +        &kORd
22776     +        %do i = &start %to &end;
22777     +            &&varname&i
22778     +         %end;
22779     +        ;
22780     +     run;
22781     +%end;
22782     +%mend keepordrop;
22783     +%macro dropformatvars;
22784     +   %put fmtcnt=&fmtcnt;
22785     +   data new;
22786     +     set work.importfile;
22787     +     %do i = 1 %to &fmtcnt;
22788     +       x1zy&i =put(&&varname&i,&&fmt&i);
22789     +     %end;
22790     +   run;
22791     +   data new;
22792     +     set new;
22793     +     drop
22794     +     %do i = 1 %to &fmtcnt;
22795     +     &&varname&i
22796     +     %end;
22797     +     ;
22798     +   run;
22799     +   proc datasets library=work nolist;
22800     +     modify new;
22801     +     %do i = 1 %to &fmtcnt;
22802     +     rename x1zy&i=&&varname&i;
22803     +     %end;
22804     +   run; quit;
22805     +   data work.importfile;
22806     +     set new;
22807     +   run;
22808     +%mend;
22810     +%macro procimport(out=);
22811     +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
22812     +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
22813     +         out=&out
22814     +         dbms = ACCESS
22815     +         replace;
22816     +         database="%trim(&_IFILENAME)"
22817     +   %end;
22818     +   %else %do;
22819     +       proc import datafile="%trim(&_IFILENAME)"
22820     +          out=&out
22822     +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
22823     +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
22824     +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
22825     +         dbms=&EM_PROPERTY_FILETYPE
22826     +      %end;
22827     +      %else %do;
22828     +         dbms=TAB
22829     +      %end;
22830     +      /* Work around for the following defects:S0560899 and S0560009.   */
22831     +      %let sasEnv=%sysfunc(getlocenv());
22832     +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
22833     +         dbms=EXCEL
22834     +      %end;
22836     +      replace;
22837     +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
22838     +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
22839     +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
22840     +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
22841     +            getnames=&EM_PROPERTY_NAMEROW;
22842     +        %end;
22843     +      %end;
22844     +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
22845     +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
22846     +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
22847     +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
22848     +               delimiter=" ";
22849     +            %end;
22850     +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
22851     +               /* Do not specifiy a delimiter */
22852     +            %end;
22853     +            %else %do;
22854     +               delimiter="&EM_PROPERTY_DELIMITER";
22855     +            %end;
22856     +         %end;
22857     +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
22858     +            datarow=&EM_PROPERTY_SKIPROWS;
22859     +            /* Guessingrows must be >= skiprows */
22860     +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
22861     +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
22862     +            %end;
22863     +         %end;
22864     +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
22865     +            guessingrows=&EM_PROPERTY_GUESSROWS;
22866     +         %end;
22867     +       %end;
22868     +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
22869     +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
22870     +            FMTLIB = work.formats;
22871     +      %end;
22872     +   %end;
22873     +   run;
22874     +%mend procimport;
22876     +%macro train;
22878     +   %let vvnString = %sysfunc(getoption(validvarname));
22880     +   %em_getname(key=DATA,           type=DATA);
22881     +   %em_getname(key=EMCMETADEFAULT, type=DATA);
22882     +   %em_getname(key=EMTMETADEFAULT, type=DATA);
22883     +   %em_getname(key=EMSTATDEFAULT, type=DATA);
22885     +   %appendExt;
22887     +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
22888     +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
22889     +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
22890     +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
22891     +   %end;
22893     +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
22894     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
22895     +       %goto endtrain;
22896     +   %end;
22898     +   options validvarname=ANY;
22899     +   %procimport(out=work.importfile);
22901     +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
22902     +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
22903     +      %global fmtcnt;
22904     +      %let fmtcnt=0;
22905     +      proc contents data=work.importfile out=work.impattrs noprint;
22906     +      run;
22907     +      data _null_;
22908     +        set work.impattrs;
22909     +        if _n_=1 then i=0;
22910     +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
22911     +           i = i+1;
22912     +           varname = substr(name, 1, length(name));
22913     +           call symput("fmt"||left(i), trim(format)||".");
22914     +           call symput("varname"||left(i), varname);
22915     +           call symput("fmtcnt",left(i));
22916     +      end;
22917     +      retain i;
22918     +     run;
22919     +    %if &fmtcnt > 0 %then %do;
22920     +       %dropformatvars;
22921     +    %end;
22922     +    proc datasets lib=work memtype=data nolist;
22923     +        modify importfile;
22924     +        attrib _all_ format=;
22925     +    run;
22926     +    quit;
22927     +   %end;
22929     +   %let _fimportObs  = 0;
22930     +   %let _fimportVars = 0;
22931     +   %if %sysfunc(exist(work.importFile)) %then %do;
22932     +       %let dsid = %sysfunc(open(work.importFile));
22933     +       %if &dsid %then %do;
22934     +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
22935     +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
22936     +       %let dsid = %sysfunc(close(&dsid));
22937     +       %end;
22938     +   %end;
22940     +   %if ^&_fimportObs %then %do;
22941     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
22942     +       %goto endtrain;
22943     +   %end;
22944     +   %if ^&_fimportVars %then %do;
22945     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
22946     +       %goto endtrain;
22947     +   %end;
22949     +   data &em_user_data;
22950     +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
22951     +   run;
22952     +   %keepordrop;
22954     +   %em_getname(key=EMSTAT,     type=DATA);
22956     +   proc datasets lib=&em_lib nolist;
22957     +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
22958     +   run;
22960     +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
22961     +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
22962     +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
22963     +            maxPercentMissing=50, applyMaxClassLevels=Y,
22964     +            maxClassLevels=20, identifyEmptyColumns=Y,
22965     +            outdata=&em_user_EMCMETADEFAULT,
22966     +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
22968     +        data &em_user_emcmetadefault;
22969     +           set &em_user_emcmetadefault;
22970     +           drop nlevel pctmiss min max mean std skewness kurtosis;
22971     +        run;
22973     +        data &em_data_eminfo;
22974     +           length TARGET KEY $32  DATA $43;
22975     +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
22976     +        run;
22978     +        %let EM_META_ADVISOR=ADVANCED;
22980     +   %end;
22981     +   %else %do;
22982     +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
22983     +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
22984     +            identifyEmptyColumns=N,   maxLevelDetection=0,
22985     +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
22987     +            %if "&em_property_summarize" eq "Y" %then %do;
22988     +                %em_getname(key=EMSTAT,  type=DATA);
22989     +                data &em_data_eminfo;
22990     +                   length TARGET KEY $32  DATA $43;
22991     +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
22992     +                run;
22993     +            %end;
22995     +        %let EM_META_ADVISOR=BASIC;
22997     +   %end;
22999     +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
23000     +   data _null_;
23001     +      fname = '_text';
23002     +      rc=filename(fname, "&em_user_vvnlabel");
23003     +      if ^rc and fexist(fname) then
23004     +         rc=fdelete(fname);
23005     +     rc=filename(fname);
23006     +   run;
23009     +   /* Validvarname Case */
23010     +   %let newNameFlag = 0;
23011     +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
23012     +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
23013     +        %if &dsid %then %do;
23014     +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
23015     +            %let dsid = %sysfunc(close(&dsid));
23016     +       %end;
23017     +   %end;
23019     +   %if %sysevalf(&newNameFlag>0) %then %do;
23020     +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
23021     +       run;
23022     +       proc sort data=work._any; by VARNUM; run; quit;
23024     +       options validvarname=V7;
23026     +       %procimport(out=work.importfile2);
23028     +       options validvarname=ANY;
23030     +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
23031     +       run;
23032     +       proc sort data=work._v7; by varnum; run; quit;
23034     +       filename _FI "&em_user_vvnlabel";
23035     +       data work._names;
23036     +          length string $200;
23037     +          merge work._v7 work._any;
23038     +          by VARNUM;
23039     +          file _FI;
23040     +          if V7NAME ne NAME then do;
23041     +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
23042     +             put string;
23043     +             if LABEL eq '' then do;
23044     +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
23045     +                put string;
23046     +             end;
23047     +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
23048     +             put string;
23049     +          end;
23050     +          drop string;
23051     +       run;
23052     +       data &em_user_data;
23053     +          set &em_user_data;
23054     +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
23055     +              filename _FI "&em_user_vvnlabel";
23056     +              %inc _FI;
23057     +             filename _FI;
23058     +          %end;
23059     +       run;
23061     +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
23062     +       proc sort data=work._names;             by NAME; run;
23064     +       data &em_user_EMCMETADEFAULT;
23065     +         merge  &em_user_EMCMETADEFAULT _names;
23066     +         by NAME;
23067     +         length DROP $1;
23068     +         DROP='N';
23069     +         if NEWNAME ne NAME then do;
23070     +            if LABEL eq '' then do;
23071     +               LABEL = NAME;
23072     +            end;
23073     +            NAME=V7NAME;
23074     +         end;
23075     +         drop NEWNAME V7NAME VARNUM;
23076     +       run;
23078     +       proc datasets lib=work nolist;
23079     +          delete _any _v7 _names importfile2;
23080     +       run;
23081     +       quit;
23083     +   %end;
23084     +   %else %do;
23085     +       data &em_user_EMCMETADEFAULT;
23086     +          set &em_user_EMCMETADEFAULT;
23087     +          length DROP $1;
23088     +          DROP='N';
23089     +       run;
23090     +   %end;
23092     +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
23094     +   data _temp;
23095     +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
23096     +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
23097     +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
23098     +      COLUMNMETAMODTIME=MODTIME;
23099     +   run;
23100     +   proc sort data=&em_data_importset;
23101     +      by PORT;
23102     +   run;
23103     +   data &em_data_importset;
23104     +      merge &em_data_importset _temp;
23105     +      by PORT;
23106     +      if PORT='DATA' then ROLE="&em_property_role";
23107     +   run;
23109     +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
23111     +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
23112     +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
23113     +            filename x "&em_user_variablesetdelta";
23114     +            data &em_data_variableset;
23115     +               set &em_user_emcmetadefault;
23116     +               %inc X;
23117     +            run;
23118     +            filename x;
23119     +        %end;
23120     +        %else %do;
23121     +            data &em_data_variableset;
23122     +               set &em_user_emcmetadefault;
23123     +            run;
23124     +        %end;
23125     +    %end;
23127     +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
23128     +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
23129     +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
23130     +         id NAME;
23131     +      run;
23133     +         filename x1 "&EM_FILE_CDELTA_TRAIN";
23134     +         data _null_;
23135     +            length string $200;
23136     +            set _DiffMeta end=eof;
23137     +            where _type_='COMPARE';
23138     +            file x1;
23139     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
23140     +            put string;
23141     +            string = '   ROLE="'!!strip(ROLE)!!'";';
23142     +            put string;
23143     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
23144     +            put string;
23145     +            string = '   ORDER="'!!strip(ORDER)!!'";';
23146     +            put string;
23147     +            put 'end;';
23148     +            if drop='Y' then do;
23149     +               string='if NAME="'!!strip(NAME)!!'" then delete;';
23150     +               put string;
23151     +            end;
23152     +            if eof then
23153     +               put 'drop DROP;';
23154     +         run;
23156     +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
23157     +         filename x2 "&em_user_deltacode";
23158     +         %em_copyfile(infref=x1, outfref=x2);
23159     +         filename x1;
23160     +         filename x2;
23162     +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
23163     +         filename x "&em_user_variablesetdelta";
23164     +         data _null_;
23165     +            length string $200;
23166     +            set _DiffMeta end=eof;
23167     +            where _type_='COMPARE';
23168     +            file x;
23169     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
23170     +            put string;
23171     +            string = '   ROLE="'!!strip(ROLE)!!'";';
23172     +            put string;
23173     +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
23174     +            put string;
23175     +            string = '   ORDER="'!!strip(ORDER)!!'";';
23176     +            put string;
23177     +            string = '   DROP="'!!strip(DROP)!!'";';
23178     +            put string;
23179     +            put 'end;';
23180     +         run;
23181     +         filename x;
23182     +       proc datasets lib=work nolist;
23183     +          delete _DiffMeta;
23184     +       run;
23186     +       data &em_data_exportset;
23187     +          set &em_data_exportset;
23188     +          if NODEPORT='TRAIN' then do;
23189     +             ROLE="&em_property_role";
23190     +             COLUMNMETAMODTIME=datetime();
23191     +             MODTIME=datetime();
23192     +             DATASET="&em_nodeid._train";
23193     +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
23194     +             DELTACODE="CDelta_TRAIN";
23195     +             APPLYDELTA='Y';
23196     +             EXPORT='Y';
23197     +             NEEDUPDATE='Y';
23199     +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
23200     +                EMINFO="&em_data_eminfo";
23201     +                EMINFOMODTIME=datetime();
23202     +            %end;
23203     +            %else %do;
23204     +                EMINFO='';
23205     +                EMINFOMODTIME=.;
23206     +            %end;
23207     +          end;
23208     +       run;
23209     +   %end;
23211     +  proc contents data=&em_user_data;
23212     +  run;
23213     +  proc datasets library=work nolist;
23214     +   delete importfile importattrs new;
23215     +   quit;
23216     +  run;
23218     +  /* Reset VALIDVARNAME to original settings */
23219     +  options validvarname=&vvnString;
23221     +  %endtrain:
23222     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(APPENDEXT):   data _null_;
MPRINT(APPENDEXT):   tempuif = trim("C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.txt");
MPRINT(APPENDEXT):   rfile = reverse(tempuif);
MPRINT(APPENDEXT):   period = indexc(rfile,".");
MPRINT(APPENDEXT):   uif = substr(tempuif, 1, length(tempuif)- period+1);
MPRINT(APPENDEXT):   newuif = trim(uif)||trim("xlsx");
MPRINT(APPENDEXT):   call symput("EM_USER_USERIMPORTFILE",newuif);
MPRINT(APPENDEXT):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   options validvarname=ANY;
MPRINT(PROCIMPORT):   proc import datafile=
filetype=*xlsx*
delimiter=*,*
MPRINT(PROCIMPORT):  "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\USERIMPORTFILE.xlsx" out=work.importfile dbms=xlsx replace;
MPRINT(PROCIMPORT):   RXLX;
MPRINT(PROCIMPORT):   run;

NOTE: The import data set has 12367 observations and 2 variables.
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.21 seconds
      cpu time            0.12 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   set work.importfile(obs=1000000);
MPRINT(TRAIN):   run;

NOTE: There were 12367 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT_DATA has 12367 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(KEEPORDROP):   proc contents data=work.importfile noprint out=work.importattrs;
MPRINT(KEEPORDROP):   run;

NOTE: The data set WORK.IMPORTATTRS has 2 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(KEEPORDROP):  ;
MPRINT(KEEPORDROP):   data _null_;
MPRINT(KEEPORDROP):   set work.importattrs;
MPRINT(KEEPORDROP):   call symput("varname"||left(_n_),name);
MPRINT(KEEPORDROP):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 2 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=2  maxcols=10000
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets lib=EMWS1 nolist;
MPRINT(TRAIN):   delete FIMPORT_EMSTATDEFAULT FIMPORT_EMINFO;
MPRINT(TRAIN):   run;

NOTE: The file EMWS1.FIMPORT_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;

23223      %let SYSCC = 0;
23224      %let _dsidTable = 0;
23225      %let _engineTable =;
23226      data _null_;
MPRINT(EMADVISECOLUMNS):    data _null_;
23227      dsid = open('EMWS1.FIMPORT_DATA');
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.FIMPORT_DATA');
23228      call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
23229      if dsid then do;
MPRINT(EMADVISECOLUMNS):   if dsid then do;
23230      call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
23231      dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
23232      end;
MPRINT(EMADVISECOLUMNS):   end;
23233      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

23234      options fmterr;
MPRINT(EMADVISECOLUMNS):    options fmterr;
23235      data _metaTestView;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
23236      set EMWS1.FIMPORT_DATA;
MPRINT(EMADVISECOLUMNS):   set EMWS1.FIMPORT_DATA;
23237      if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
23238      output;
MPRINT(EMADVISECOLUMNS):   output;
23239      stop;
MPRINT(EMADVISECOLUMNS):   stop;
23240      end;
MPRINT(EMADVISECOLUMNS):   end;
23241      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23242      proc contents data=EMWS1.FIMPORT_DATA
23243      out=WORK.M0I96KN3 noprint;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.FIMPORT_DATA out=WORK.M0I96KN3 noprint;
23244      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: The data set WORK.M0I96KN3 has 2 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23245      data WORK.M0I96KN3;
MPRINT(EMADVISECOLUMNS):    data WORK.M0I96KN3;
23246      length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
23247      label NAME =;
MPRINT(EMADVISECOLUMNS):   label NAME =;
23248      set WORK.M0I96KN3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   set WORK.M0I96KN3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
23249      if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
23250      else type = 'C';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
23251      if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
23252      if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
23253      if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
23254      else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
23255      end;
MPRINT(EMADVISECOLUMNS):   end;
23256      else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
23257      end;
MPRINT(EMADVISECOLUMNS):   end;
23258      else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
23259      if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
23260      if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
23261      if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
23262      else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
23263      end;
MPRINT(EMADVISECOLUMNS):   end;
23264      else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
23265      end;
MPRINT(EMADVISECOLUMNS):   end;
23266      else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
23267      if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
23268      else index = "Y";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
23269      indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
23270      drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
23271      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 2 observations read from the data set WORK.M0I96KN3.
NOTE: The data set WORK.M0I96KN3 has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

23272      data WORK.M0I96KN3;
MPRINT(EMADVISECOLUMNS):    data WORK.M0I96KN3;
23273      length UNAME $64;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
23274      set WORK.M0I96KN3;
MPRINT(EMADVISECOLUMNS):   set WORK.M0I96KN3;
23275      UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
23276      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 2 observations read from the data set WORK.M0I96KN3.
NOTE: The data set WORK.M0I96KN3 has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3RVI4T4 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
23280      data WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RVI4T4;
23281      drop UNAME;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
23282      set WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RVI4T4;
23283      run;
MPRINT(EMADVISECOLUMNS):   run;

NOTE: There were 2 observations read from the data set WORK.M3RVI4T4.
NOTE: The data set WORK.M3RVI4T4 has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISECOLUMNS):    data WORK.M2W2VKG9(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   set WORK.M3RVI4T4;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.19 seconds
      cpu time            0.15 seconds
      

MPRINT(EMADVISECOLUMNS):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   fname = '_text';
MPRINT(TRAIN):   rc=filename(fname, "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\VVNLABEL.sas");
MPRINT(TRAIN):   if ^rc and fexist(fname) then rc=fdelete(fname);
MPRINT(TRAIN):   rc=filename(fname);
MPRINT(TRAIN):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
MPRINT(TRAIN):   length DROP $1;
MPRINT(TRAIN):   DROP='N';
MPRINT(TRAIN):   run;

NOTE: There were 2 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_EMCMETADEFAULT has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EMADVISETABLE):   proc display c=sashelp.emmeta.advisetable.scl;
MPRINT(EMADVISETABLE):   run;

23534      %let SYSCC = 0;
23535      data EMWS1.FIMPORT_EMTMETADEFAULT;
MPRINT(EMADVISETABLE):    data EMWS1.FIMPORT_EMTMETADEFAULT;
23536      length LIBNAME $8;
MPRINT(EMADVISETABLE):   length LIBNAME $8;
23537      LIBNAME = "EMWS1";
MPRINT(EMADVISETABLE):   LIBNAME = "EMWS1";
23538      run;
MPRINT(EMADVISETABLE):   run;

NOTE: The data set EMWS1.FIMPORT_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EMADVISETABLE):    data _null_;
MPRINT(EMADVISETABLE):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(EMADVISETABLE):   call symput("_DSID", put(dsid,BEST.));
MPRINT(EMADVISETABLE):   if dsid > 0 then dsid = close(dsid);
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):    ods output enginehost=em_tablehost;
MPRINT(EMADVISETABLE):   ods listing close;
MPRINT(EMADVISETABLE):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(EMADVISETABLE):   run;
MPRINT(EMADVISETABLE):   ods listing;
MPRINT(EMADVISETABLE):    data WORK.M31N7A2F;
MPRINT(EMADVISETABLE):   length MEMNAME $ 32 MEMTYPE $ 8 MEMLABEL $ 256 TYPEMEM $ 8 ENGINE $ 8 CRDATE 8 MODATE 8 NOBS 8 NCOLS 8 NBYTES 8 ROLE $ 20 USEEXTERNALDATA $1 SAMPLINGRATE 8 SEGMENT $ 20;
MPRINT(EMADVISETABLE):   set WORK.M31N7A2F(obs=1);
MPRINT(EMADVISETABLE):   nobs = 12367;
MPRINT(EMADVISETABLE):   ncols = 2;
MPRINT(EMADVISETABLE):   nbytes = 459776;
MPRINT(EMADVISETABLE):   memname = "FIMPORT_DATA";
MPRINT(EMADVISETABLE):   memtype = "DATA    ";
MPRINT(EMADVISETABLE):   memlabel = "";
MPRINT(EMADVISETABLE):   typemem = "DATA    ";
MPRINT(EMADVISETABLE):   engine = "V9      ";
MPRINT(EMADVISETABLE):   crdate = 1951926602.102;
MPRINT(EMADVISETABLE):   modate = 1951926602.102;
MPRINT(EMADVISETABLE):   format crdate datetime16.;
MPRINT(EMADVISETABLE):   format modate datetime16.;
MPRINT(EMADVISETABLE):   if role = ' ' then role = 'TRAIN';
MPRINT(EMADVISETABLE):   output;
MPRINT(EMADVISETABLE):   run;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.12 seconds
      cpu time            0.10 seconds
      

MPRINT(EMADVISETABLE):   
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _temp;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMTMETADEFAULT(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
MPRINT(TRAIN):   keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
MPRINT(TRAIN):   PORT='DATA';
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_EMCMETADEFAULT";
MPRINT(TRAIN):   COLUMNMETAMODTIME=MODTIME;
MPRINT(TRAIN):   run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc sort data=EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ImportSet;
MPRINT(TRAIN):   merge EMWS1.FIMPORT_ImportSet _temp;
MPRINT(TRAIN):   by PORT;
MPRINT(TRAIN):   if PORT='DATA' then ROLE="TRANSACTION";
MPRINT(TRAIN):   run;

NOTE: There were 15 observations read from the data set EMWS1.FIMPORT_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data EMWS1.FIMPORT_VariableSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_EMCMETADEFAULT;
NOTE: %INCLUDE (level 1) file X is file C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt.
23567     +if NAME="Attribute" then do;
MPRINT(TRAIN):   if NAME="Attribute" then do;
23568     +ROLE="TARGET";
MPRINT(TRAIN):   ROLE="TARGET";
23569     +LEVEL="NOMINAL";
MPRINT(TRAIN):   LEVEL="NOMINAL";
23570     +ORDER="";
MPRINT(TRAIN):   ORDER="";
23571     +DROP="N";
MPRINT(TRAIN):   DROP="N";
23572     +end;
MPRINT(TRAIN):   end;
23573     +if NAME="Serial" then do;
MPRINT(TRAIN):   if NAME="Serial" then do;
23574     +ROLE="ID";
MPRINT(TRAIN):   ROLE="ID";
23575     +LEVEL="INTERVAL";
MPRINT(TRAIN):   LEVEL="INTERVAL";
23576     +ORDER="";
MPRINT(TRAIN):   ORDER="";
23577     +DROP="N";
MPRINT(TRAIN):   DROP="N";
23578     +end;
MPRINT(TRAIN):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   run;

NOTE: There were 2 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT_VARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc compare compare=EMWS1.FIMPORT_VariableSet base=EMWS1.FIMPORT_EMCMETADEFAULT noprint outnoequal outbase outcomp out=_DiffMeta noprint;
MPRINT(TRAIN):   id NAME;
MPRINT(TRAIN):   run;

NOTE: There were 2 observations read from the data set EMWS1.FIMPORT_VARIABLESET.
NOTE: There were 2 observations read from the data set EMWS1.FIMPORT_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 4 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x1 "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x1;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   if drop='Y' then do;
MPRINT(TRAIN):   string='if NAME="'!!strip(NAME)!!'" then delete;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if eof then put 'drop DROP;';
MPRINT(TRAIN):   run;

NOTE: The file X1 is:
      Filename=C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Nov2021:17:50:02,
      Create Time=07Nov2021:17:44:45

NOTE: 11 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 28.
NOTE: There were 2 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x2 "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file x2 lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("x1",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file X2 is:
      Filename=C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Nov2021:17:50:02,
      Create Time=07Nov2021:17:45:19

NOTE: 11 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 28.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x1;
NOTE: Fileref X1 has been deassigned.
MPRINT(TRAIN):   filename x2;
NOTE: Fileref X2 has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename x "C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length string $200;
MPRINT(TRAIN):   set _DiffMeta end=eof;
MPRINT(TRAIN):   where _type_='COMPARE';
MPRINT(TRAIN):   file x;
MPRINT(TRAIN):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ROLE="'!!strip(ROLE)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string= '   LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   ORDER="'!!strip(ORDER)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   string = '   DROP="'!!strip(DROP)!!'";';
MPRINT(TRAIN):   put string;
MPRINT(TRAIN):   put 'end;';
MPRINT(TRAIN):   run;

NOTE: The file X is:
      Filename=C:\Users\mutawakelm\My Drive\Data Science MSc\ASDM\Course Work\Association Rules\SAS Part\Association Rules in SAS\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Nov2021:17:50:02,
      Create Time=07Nov2021:17:45:19

NOTE: 12 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 28.
NOTE: There were 2 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(TRAIN):   proc datasets lib=work nolist;
MPRINT(TRAIN):   delete _DiffMeta;
MPRINT(TRAIN):   run;

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   data EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   set EMWS1.FIMPORT_ExportSet;
MPRINT(TRAIN):   if NODEPORT='TRAIN' then do;
MPRINT(TRAIN):   ROLE="TRANSACTION";
MPRINT(TRAIN):   COLUMNMETAMODTIME=datetime();
MPRINT(TRAIN):   MODTIME=datetime();
MPRINT(TRAIN):   DATASET="FIMPORT_train";
MPRINT(TRAIN):   COLUMNMETA="FIMPORT_CMeta_TRAIN";
MPRINT(TRAIN):   DELTACODE="CDelta_TRAIN";
MPRINT(TRAIN):   APPLYDELTA='Y';
MPRINT(TRAIN):   EXPORT='Y';
MPRINT(TRAIN):   NEEDUPDATE='Y';
MPRINT(TRAIN):   EMINFO='';
MPRINT(TRAIN):   EMINFOMODTIME=.;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;

NOTE: There were 6 observations read from the data set EMWS1.FIMPORT_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   proc contents data=EMWS1.FIMPORT_DATA;
MPRINT(TRAIN):   run;

NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.

MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete importfile importattrs new;
MPRINT(TRAIN):   quit;

NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):   run;
MPRINT(TRAIN):   options validvarname=V7;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23579      *------------------------------------------------------------*;
23580      * End TRAIN: FIMPORT;
23581      *------------------------------------------------------------*;

23582      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23583      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
23584      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23585      ;
MPRINT(EM_DIAGRAM):   ;
23586      ;
MPRINT(EM_DIAGRAM):   ;
23587      ;
MPRINT(EM_DIAGRAM):   ;
23588      ;
MPRINT(EM_DIAGRAM):   ;
23589      quit;
MPRINT(EM_DIAGRAM):   quit;
23590      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23591      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
23592      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23593      /*; *"; *'; */
23594      ;
MPRINT(EM_DIAGRAM):   ;
23595      run;
MPRINT(EM_DIAGRAM):   run;
23596      quit;
MPRINT(EM_DIAGRAM):   quit;
23597      /* Reset EM Options */
23598      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
23599      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
23600      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
